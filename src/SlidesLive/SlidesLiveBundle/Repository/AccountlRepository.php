<?php

namespace SlidesLive\SlidesLiveBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountRepository extends EntityRepository {

    public function listAllChannels(AccessControl $ac = null) {
        $em = $this->getEntityManager();
        if (is_null($ac)) {
            $query = $em->createQuery('SELECT ch
                                    FROM MetaBundle:Channel ch 
                                    WHERE ch.private = 0
                                    ORDER BY ch.canonicalName ASC');
        } else {
            $query = $em->createQuery('SELECT ch
                                    FROM MetaBundle:Channel ch 
                                    WHERE ch.private = 0 OR ch.id = :id
                                    ORDER BY ch.canonicalName ASC')
                            ->setParameter('id', $ac->getEntity()->getId());
        }
        return $query->getResult();
    }

    public function findOneChannelByCanonicalName($canonicalName, AccessControl $ac = null) {
        $channel = $this->findOneByCanonicalName($canonicalName);
        if (empty($channel)) {
            return null;
        }
        if ($channel->getPrivate()) {
            if (!is_null($ac) && $ac->getEntity()->getId() == $channel->getId()) {
                return $channel;
            } else {
                return null;
            }
        } else {
            return $channel;
        }
    }

    public function getAuthorizedPresentations(\Meta\MetaBundle\Entity\Channel $channel, $ac = null) {
        $em = $this->getEntityManager();
        $presentations = $em
                        ->createQuery(
                                'SELECT p
          FROM MetaBundle:Presentation p
          JOIN p.channel ch
          WHERE ch.name = :name
          ORDER BY p.dateRecorded DESC')
                        ->setParameter('name', $channel->getName())
                        ->getResult();
        if (!is_null($ac)) {
            foreach ($presentations as $p) {
                if ($p->getPrivate()) {
                    unset($p);
                }
            }
        }
        return $presentations;
    }

}