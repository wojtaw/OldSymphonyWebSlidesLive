<?php

namespace SlidesLive\SlidesLiveBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FolderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FolderRepository extends EntityRepository {
  
  /**
   * Nacteni folder patriciho vybranemu accountu podle
   * urovne ochrany soukromy folderu (public/unlisted).      
   */     
  public function findAccountFolder($accountId, $folderCanName, $privacyLevel) {
    $em = $this->getEntityManager();
    $query = $em->createQuery(
      'SELECT f
      FROM SlidesLiveBundle:Folder f
      JOIN f.account a
      WHERE a.id = :accountId
      AND f.canonicalName = :folderCanName
      AND a.privacy <= :privacyLevel
      AND f.privacy <= :privacyLevel')
      ->setParameters(array(
          'accountId' => $accountId,
          'folderCanName' => $folderCanName,
          'privacyLevel' => $privacyLevel
        )
      );
    try {
      return $query->getSingleResult();
    }  
    catch (\Exception $e) {
      return null;
    }            
  }
  
  /**
   * Nacteni pole folderu (razenych abecende) patricich vybranemu accountu podle
   * urovne ochrany soukromy folderu (public/unlisted).      
   */     
  public function findAccountFolders($accountId, $privacyLevel) {
    $em = $this->getEntityManager();
    $query = $em->createQuery(
      'SELECT f
      FROM SlidesLiveBundle:Folder f
      JOIN f.account a
      WHERE a.id = :accountId
      AND a.privacy <= :privacyLevel
      AND f.privacy <= :privacyLevel
      ORDER BY f.name ASC')
      ->setParameters(array(
          'accountId' => $accountId,
          'privacyLevel' => $privacyLevel
        )
      );
    return $query->getResult();        
  }

  public function findAccountFoldersByNameAndCanName($accountId, $folder) {
    $em = $this->getEntityManager();
    if (is_null($folder->getId())) {
      $folderId = -1;
    }
    else {
      $folderId = $folder->getId();
    }
    $query = $em->createQuery(
      'SELECT f
      FROM SlidesLiveBundle:Folder f
      JOIN f.account a
      WHERE a.id = :accountId
      AND f.canonicalName = :folderCanName
      AND f.id != :folderId'
    )
    ->setParameters(array(
      'folderId'      => $folderId,
      'folderCanName' => $folder->getCanonicalName(),
      'accountId'     => $accountId,
      )
    );
    return $query->getResult();
  }

  public function printResults($results) {
    echo "\nID\tFOLDER NAME\tCANONICAL NAME\tACCOUNT ID\n";
    if (count($results) < 1) {
      echo "0 results\n";
    }
    else {
      foreach ($results as $r) {
        echo $r->getId()."\t";
        echo $r->getName()."\t";
        echo $r->getCanonicalName()."\t";
        echo $r->getAccount()->getId()."\t\n";
      }
    }
    echo "\n";
  }

}